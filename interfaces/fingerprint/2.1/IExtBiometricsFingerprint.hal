/*
 * Copyright (C) 2019 The LineageOS Project
 * Copyright (C) 2019 Pierre-Hugues Husson <phh@phh.me>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package vendor.huawei.hardware.biometrics.fingerprint@2.1;

import android.hardware.biometrics.fingerprint@2.1::IBiometricsFingerprint;
import vendor.huawei.hardware.biometrics.fingerprint@2.1::IFidoAuthenticationCallback;

interface IExtBiometricsFingerprint extends android.hardware.biometrics.fingerprint@2.1::IBiometricsFingerprint {
    setLivenessSwitch(int32_t needLivenessAuthentication) generates(int32_t debugErrno);
    checkNeedReEnrollFinger() generates (int32_t debugErrno);
    removeUserData(int32_t gid, string storePath) generates (int32_t debugErrno);
    updateSecurityId(int64_t security_id) generates (int32_t debugErrno);
    getFpOldData() generates (int32_t fingerId);
    verifyUser(IFidoAuthenticationCallback fidoClientCallback, int32_t groupId, string aaid, vec<int8_t> nonce) generates (int32_t debugErrno);
    getTokenLen() generates (int32_t tokenLen);
    setCalibrateMode(int32_t do_sensor_calibration) generates (int32_t setModeStatus);
    checkNeedCalibrateFingerprint() generates (int32_t sensor_calibration_status);
    sendCmdToHal(int32_t cmdId) generates (int32_t result);
};
